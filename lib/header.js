// Generated by CoffeeScript 1.9.2
(function() {
  var Header, fs,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  Header = (function() {
    function Header(stream) {
      this.stream = stream;
      this.parseFieldSubRecord = bind(this.parseFieldSubRecord, this);
      this.parseDate = bind(this.parseDate, this);
      return this;
    }

    Header.prototype.parse = function(callback) {
      var _STATE_DONE, _STATE_FIELDS, _STATE_FINISHING, _STATE_HEADER, doParse;
      _STATE_HEADER = 1;
      _STATE_FIELDS = 2;
      _STATE_FINISHING = 3;
      _STATE_DONE = 4;
      this.state = _STATE_HEADER;
      this.index = 0;
      this.fields = [];
      doParse = (function(_this) {
        return function() {
          var buffer, delta, fieldHeaderSize, ranout;
          ranout = false;
          if (_this.state === _STATE_HEADER) {
            buffer = _this.stream.read(32);
            if (buffer === null) {
              return;
            }
            _this.index = 32;
            _this.type = (buffer.slice(0, 1)).toString('utf-8');
            _this.dateUpdated = _this.parseDate(buffer.slice(1, 4));
            _this.numberOfRecords = _this.convertBinaryToInteger(buffer.slice(4, 8));
            _this.start = _this.convertBinaryToInteger(buffer.slice(8, 10));
            _this.recordLength = _this.convertBinaryToInteger(buffer.slice(10, 12));
            _this.state = _STATE_FIELDS;
          }
          if (_this.state === _STATE_FIELDS) {
            fieldHeaderSize = 32;
            while (buffer = _this.stream.read(fieldHeaderSize)) {
              _this.index += fieldHeaderSize;
              if (buffer[0] === 0x0D) {
                _this.state = _STATE_FINISHING;
                break;
              }
              _this.fields.push(_this.parseFieldSubRecord(buffer));
            }
          }
          if (_this.state === _STATE_FINISHING) {
            delta = _this.start - _this.index;
            if (delta > 0) {
              buffer = _this.stream.read(delta);
              if (buffer === null) {
                return;
              }
            } else if (delta < 0) {
              buffer = buffer.slice(delta);
              _this.stream.unshift(buffer);
            }
            _this.state = _STATE_DONE;
          }
          if (_this.state === _STATE_DONE) {
            _this.stream.removeListener('readable', doParse);
            return callback(_this);
          }
        };
      })(this);
      return this.stream.on('readable', doParse);
    };

    Header.prototype.parseDate = function(buffer) {
      var day, month, year;
      year = 1900 + this.convertBinaryToInteger(buffer.slice(0, 1));
      month = (this.convertBinaryToInteger(buffer.slice(1, 2))) - 1;
      day = this.convertBinaryToInteger(buffer.slice(2, 3));
      return new Date(year, month, day);
    };

    Header.prototype.parseFieldSubRecord = function(buffer) {
      var header;
      return header = {
        name: ((buffer.slice(0, 11)).toString('utf-8')).replace(/[\u0000]+$/, ''),
        type: (buffer.slice(11, 12)).toString('utf-8'),
        displacement: this.convertBinaryToInteger(buffer.slice(12, 16)),
        length: this.convertBinaryToInteger(buffer.slice(16, 17)),
        decimalPlaces: this.convertBinaryToInteger(buffer.slice(17, 18))
      };
    };

    Header.prototype.convertBinaryToInteger = function(buffer) {
      return buffer.readInt32LE(0, true);
    };

    return Header;

  })();

  module.exports = Header;

}).call(this);
