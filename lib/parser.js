// Generated by CoffeeScript 1.9.2
(function() {
  var EventEmitter, Header, Parser, fs, stream,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events').EventEmitter;

  Header = require('./header');

  fs = require('fs');

  stream = require('stream');

  Parser = (function(superClass) {
    extend(Parser, superClass);

    function Parser(filename) {
      this.filename = filename;
      this.resume = bind(this.resume, this);
      this.pause = bind(this.pause, this);
      this.parseField = bind(this.parseField, this);
      this.parseRecord = bind(this.parseRecord, this);
      this.parse = bind(this.parse, this);
    }

    Parser.prototype.parse = function() {
      this.emit('start', this);
      if (this.filename instanceof stream.Stream) {
        stream = this.filename;
      } else {
        stream = fs.createReadStream(this.filename);
      }
      stream.once('end', (function(_this) {
        return function() {
          return _this.emit('end');
        };
      })(this));
      this.header = new Header(stream);
      this.header.parse((function(_this) {
        return function(err) {
          var sequenceNumber;
          _this.emit('header', _this.header);
          sequenceNumber = 0;
          _this.readBuf = function() {
            var buffer, results;
            if (_this.paused) {
              _this.emit('paused');
              return;
            }
            results = [];
            while (!_this.done && (buffer = stream.read(_this.header.recordLength))) {
              if (buffer[0] === 0x1A) {
                results.push(_this.done = true);
              } else if (buffer.length === _this.header.recordLength) {
                results.push(_this.emit('record', _this.parseRecord(++sequenceNumber, buffer)));
              } else {
                results.push(void 0);
              }
            }
            return results;
          };
          stream.on('readable', _this.readBuf);
          _this.readBuf();
          return _this;
        };
      })(this));
      return this;
    };

    Parser.prototype.parseRecord = function(sequenceNumber, buffer) {
      var field, fn, i, len, loc, record, ref;
      record = {
        '@sequenceNumber': sequenceNumber,
        '@deleted': (buffer.slice(0, 1))[0] !== 32
      };
      loc = 1;
      ref = this.header.fields;
      fn = (function(_this) {
        return function(field) {
          return record[field.name] = _this.parseField(field, buffer.slice(loc, loc += field.length));
        };
      })(this);
      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        fn(field);
      }
      return record;
    };

    Parser.prototype.parseField = function(field, buffer) {
      var value;
      value = (buffer.toString('utf-8')).replace(/^\x20+|\x20+$/g, '');
      if (field.type === 'N') {
        value = parseInt(value, 10);
      }
      return value;
    };

    Parser.prototype.pause = function() {
      return this.paused = true;
    };

    Parser.prototype.resume = function() {
      this.paused = false;
      this.emit('resuming');
      return this.readBuf();
    };

    return Parser;

  })(EventEmitter);

  module.exports = Parser;

}).call(this);
